name: Update EPG XML Hallmark EastUS

on:
  schedule:
    - cron: '0 0 * * *'  # Runs at midnight UTC daily
  workflow_dispatch:  # Allows manual runs

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create individual folder if it doesn't exist
        run: mkdir -p individual

      - name: Fetch EPG XML
        run: curl -o individual/USA-Hallmark_EastUS.xml "https://epg.pw/api/epg.xml?lang=en&date=$(date +%Y%m%d)&channel_id=403490"

      - name: Add XML Declaration and DOCTYPE
        run: |
          sed -i '1s|$| <!DOCTYPE tv SYSTEM "xmltv.dtd">|' individual/USA-Hallmark_EastUS.xml

      - name: Check for Title "The Golden Girls" in XML and Add Icon and Categories
        run: |
          if grep -q '<title lang="zh">The Golden Girls</title>' individual/USA-Hallmark_EastUS.xml; then
            echo "Found The Golden Girls in the EPG XML!"
            sed -i '/<title lang="zh">The Golden Girls<\/title>/a \
            <icon src="https://prod-ripcut-delivery.disney-plus.net/v1/variant/disney/F80FC1BEEB1807F513153B1242DDF2561BCA58759E87AFCFAF602B0423912D46/scale?width=1200&aspectRatio=1.78&format=webp"/>\
            <category lang="en">Series</category>\
            <category lang="en">Comedy</category>\
            <category lang="en">Sitcom</category>\
            <category lang="en">Drama</category>' individual/USA-Hallmark_EastUS.xml
          else
            echo "The Golden Girls not found in the EPG XML."
          fi


      - name: Check for Title "Reba" in XML and Add Icon and Categories
        run: |
          if grep -iq '<title[^>]*>Reba</title>' individual/USA-Hallmark_EastUS.xml; then
            echo "Found Reba in the EPG XML!"
            sed -i '/<title[^>]*>Reba<\/title>/a \
            <icon src="https://m.media-amazon.com/images/S/pv-target-images/7727258bad222b37ca98e9cffe3e847cc474add3fa3b19f38d511e29586a76de.jpg"/>\
            <category lang="en">Series</category>\
            <category lang="en">Drama</category>\
            <category lang="en">Comedy</category>\
            <category lang="en">Sitcom</category>\
            <category lang="en">Family</category>' individual/USA-Hallmark_EastUS.xml
          else
            echo "Reba not found in the EPG XML."
          fi
          
      - name: Check for Title "Frasier" in XML and Add Icon and Categories
        run: |
          if grep -iq '<title[^>]*>Frasier</title>' individual/USA-Hallmark_EastUS.xml; then
            echo "Found Frasier in the EPG XML!"
            sed -i '/<title[^>]*>Frasier<\/title>/a \
            <icon src="https://images1.resources.foxtel.com.au/store2/mount1/16/2/81moo.jpg"/>\
            <category lang="en">Series</category>\
            <category lang="en">Comedy</category>\
            <category lang="en">Sitcom</category>\
            <category lang="en">Family</category>' individual/USA-Hallmark_EastUS.xml
          else
            echo "Frasier not found in the EPG XML."
          fi

          - name: Enrich EPG with season/episode from TVmaze (throttled)
  run: |
    python3 <<EOF
import xml.etree.ElementTree as ET
import requests
import re
import time

tree = ET.parse("individual/USA-Hallmark_EastUS.xml")
root = tree.getroot()

def normalize(text):
    return re.sub(r'\W+', ' ', text).strip().lower()

def fetch_show_episodes(title):
    if title in cache:
        return cache[title]
    print(f"Fetching episodes for {title}")
    try:
        res = requests.get(f"https://api.tvmaze.com/singlesearch/shows?q={title}&embed=episodes", timeout=5)
        if res.status_code == 200:
            data = res.json()
            episodes = data["_embedded"]["episodes"]
            cache[title] = episodes
            time.sleep(0.6)  # Throttle request
            return episodes
    except Exception as e:
        print(f"TVmaze request failed for {title}: {e}")
    cache[title] = []
    return []

cache = {}
seen_titles = set()

for prog in root.findall("programme"):
    title_el = prog.find("title")
    desc_el = prog.find("desc")
    if title_el is None or desc_el is None:
        continue

    title = title_el.text.strip()
    desc = desc_el.text.strip()

    if title in seen_titles:
        continue
    seen_titles.add(title)

    episodes = fetch_show_episodes(title)
    if not episodes:
        continue

    for ep in episodes:
        summary = ep.get("summary") or ""
        if normalize(desc)[:50] in normalize(summary):
            season = ep["season"]
            episode = ep["number"]
            ep_num_el = prog.find("episode-num[@system='xmltv_ns']")
            if ep_num_el is None:
                ep_num_el = ET.SubElement(prog, "episode-num", attrib={"system": "xmltv_ns"})
            ep_num_el.text = f"{season - 1}.{episode}.0"
            print(f"Matched: {title} -> S{season:02}E{episode:02}")
            break

tree.write("individual/USA-Hallmark_EastUS.xml", encoding="utf-8", xml_declaration=True)
EOF


      - name: Commit and push if changed
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add individual/USA-Hallmark_EastUS.xml
          git commit -m "Updated EPG $(date +%Y-%m-%d)" || echo "No changes to commit"
          git pull --rebase --autostash
          git push --force
