(Code on standby while API key is sorted)
name: Enrich all XML files using OMDb

on:
  schedule:
    - cron: '10 0 * * *'  # Runs daily at 00:10 UTC
  workflow_dispatch:       # Allows manual trigger from GitHub UI

jobs:
  enrich_epgs:
    runs-on: ubuntu-latest
    env:
      OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python 3
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install lxml requests

      - name: Enrich all XML files in individual/
        run: |
          python3 - <<'EOF'
          import os
          import re
          import time
          import glob
          import requests
          from lxml import etree

          OMDB_API_KEY = os.getenv("OMDB_API_KEY")

          def normalize(text):
              return re.sub(r'\W+', ' ', text).strip().lower()

          def fetch_show_episodes_omdb(title, cache):
              if title in cache:
                  return cache[title]
              try:
                  search_url = f"http://www.omdbapi.com/?apikey={OMDB_API_KEY}&t={title}&type=series"
                  res = requests.get(search_url, timeout=5)
                  if res.status_code != 200:
                      print(f"OMDb search failed for {title}: HTTP {res.status_code}")
                      cache[title] = []
                      return []
                  data = res.json()
                  if data.get("Response") == "False":
                      print(f"OMDb search no result for {title}: {data.get('Error')}")
                      cache[title] = []
                      return []
                  imdb_id = data.get("imdbID")
                  if not imdb_id:
                      cache[title] = []
                      return []
                  episodes = []
                  for season_num in range(1, 21):
                      season_url = f"http://www.omdbapi.com/?apikey={OMDB_API_KEY}&i={imdb_id}&Season={season_num}"
                      season_res = requests.get(season_url, timeout=5)
                      if season_res.status_code != 200:
                          break
                      season_data = season_res.json()
                      if season_data.get("Response") == "False":
                          break
                      for ep in season_data.get("Episodes", []):
                          episodes.append({
                              "season": season_num,
                              "number": int(ep.get("Episode")),
                              "summary": ep.get("Plot", "") or ep.get("Title", "")
                          })
                      time.sleep(0.5)  # throttle requests
                  cache[title] = episodes
                  return episodes
              except Exception as e:
                  print(f"OMDb request failed for {title}: {e}")
                  cache[title] = []
                  return []

          cache = {}

          for xml_file in glob.glob("individual/*.xml"):
              print(f"Processing {xml_file}...")
              parser = etree.XMLParser(recover=True)
              tree = etree.parse(xml_file, parser)
              root = tree.getroot()
              seen_titles = set()

              for prog in root.findall("programme"):
                  title_el = prog.find("title")
                  desc_el = prog.find("desc")
                  if title_el is None or desc_el is None:
                      continue
                  title = title_el.text.strip()
                  desc = desc_el.text.strip()
                  if title in seen_titles:
                      continue
                  seen_titles.add(title)
                  episodes = fetch_show_episodes_omdb(title, cache)
                  if not episodes:
                      continue
                  for ep in episodes:
                      summary = ep.get("summary") or ""
                      # Match if first 50 chars of description exist in episode summary
                      if normalize(desc)[:50] in normalize(summary):
                          season = ep["season"]
                          episode = ep["number"]
                          ep_num_el = prog.find("episode-num[@system='xmltv_ns']")
                          if ep_num_el is None:
                              ep_num_el = etree.SubElement(prog, "episode-num", system="xmltv_ns")
                          ep_num_el.text = f"{season - 1}.{episode}.0"
                          print(f"Matched {title} S{season:02}E{episode:02} in {xml_file}")
                          break

              tree.write(xml_file, encoding="utf-8", xml_declaration=True)
          EOF

      - name: Commit and push if changes
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add individual/*.xml
          git diff --cached --quiet || (git commit -m "Enriched EPG XML files with OMDb data" && git push)
