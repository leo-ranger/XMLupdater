name: Generate Single Series EPG

on:
  workflow_dispatch:
    inputs:
      series_name:
        description: "Name of the TV show"
        required: true

jobs:
  generate-epg:
    runs-on: ubuntu-latest

    env:
      TRAKT_CLIENT_ID: ${{ secrets.TRAKT_CLIENT_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install lxml requests fuzzywuzzy[speedup]

      - name: Generate EPG for Series
        run: |
          python3 - <<'EOF'
          import os, re, time, requests
          from lxml import etree
          from fuzzywuzzy import fuzz

          TRAKT_CLIENT_ID = os.getenv("TRAKT_CLIENT_ID")
          if not TRAKT_CLIENT_ID:
              print("Missing TRAKT_CLIENT_ID env")
              exit(1)

          title = "${{ github.event.inputs.series_name }}".strip()
          slug_title = re.sub(r'\s+', '_', title)

          headers = {
              "Content-Type": "application/json",
              "trakt-api-version": "2",
              "trakt-api-key": TRAKT_CLIENT_ID,
          }

          def normalize(text):
              return re.sub(r'\W+', ' ', text or '').strip().lower()

          def fuzzy_best_match(title, desc, episodes, threshold=80):
              input_text = normalize(f"{title} {desc}")
              best = None
              best_score = threshold

              for ep in episodes:
                  name = ep.get("name") or ep.get("title") or ""
                  summary = ep.get("summary") or ep.get("overview") or ""

                  if re.search(r'best of|recap|greatest moments', name.lower()):
                      continue

                  fulltext = normalize(f"{title} {name} {summary}")
                  score = fuzz.partial_ratio(input_text, fulltext)
                  if score > best_score:
                      best = ep
                      best_score = score
              return best

          def fetch_tvmaze(title):
              try:
                  r = requests.get(f"https://api.tvmaze.com/singlesearch/shows?q={title}&embed=episodes", timeout=10)
                  if r.status_code == 200:
                      time.sleep(0.5)
                      eps = r.json()["_embedded"]["episodes"]
                      return [ep for ep in eps if ep["season"] > 0]
              except: pass
              return []

          def fetch_trakt_show(title):
              try:
                  r = requests.get(f"https://api.trakt.tv/search/show?query={title}&limit=1", headers=headers)
                  if r.status_code == 200 and r.json():
                      time.sleep(0.3)
                      return r.json()[0]["show"]["ids"]["slug"]
              except: pass
              return None

          def fetch_trakt_episodes(slug, season0=False):
              try:
                  r = requests.get(f"https://api.trakt.tv/shows/{slug}/seasons?extended=episodes", headers=headers)
                  if r.status_code != 200:
                      return []
                  time.sleep(0.3)
                  data = r.json()
                  result = []
                  for s in data:
                      if (s["number"] == 0) != season0:
                          result.extend(s.get("episodes", []))
                  return result
              except: return []

          # Attempt TVmaze
          episodes = fetch_tvmaze(title)
          source = "tvmaze"

          # If TVmaze fails, fallback to Trakt
          if not episodes:
              slug = fetch_trakt_show(title)
              if slug:
                  episodes = fetch_trakt_episodes(slug, season0=False)
                  source = "trakt"

          if not episodes:
              print(f"No episodes found for {title}")
              exit(1)

          root = etree.Element("tv", date=time.strftime("%Y%m%d%H%M%S"), generator_info_name="SeriesEPG Gen", generator_info_url="https://trakt.tv")

          for ep in episodes:
              season = ep.get("season", 0)
              number = ep.get("number", 0)
              if season == 0: continue

              name = ep.get("name") or ep.get("title", f"S{season}E{number}")
              summary = ep.get("summary") or ep.get("overview", "")
              airdate = ep.get("airdate") or ep.get("first_aired", "")
              if "T" in airdate:
                  airdate = airdate.split("T")[0]
              airdate = airdate.replace("-", "") if airdate else ""

              prog = etree.SubElement(root, "programme", start="00000000000000 +0000", stop="00000000000000 +0000", channel=slug_title)
              etree.SubElement(prog, "title", lang="en").text = title
              etree.SubElement(prog, "sub-title", lang="en").text = name
              etree.SubElement(prog, "desc", lang="en").text = summary
              etree.SubElement(prog, "episode-num", system="xmltv_ns").text = f"{season-1}.{number}.0"
              if airdate:
                  etree.SubElement(prog, "date").text = airdate
              etree.SubElement(prog, "category", lang="en").text = "Show"

          os.makedirs("Manual_Database", exist_ok=True)
          outfile = f"Manual_Database/{slug_title}.xml"
          etree.ElementTree(root).write(outfile, encoding="utf-8", xml_declaration=True, pretty_print=True)
          print(f"Saved EPG for {title} to {outfile}")
          EOF

      - name: Upload EPG
        uses: actions/upload-artifact@v4
        with:
          name: series-epg
          path: Manual_Database/*.xml
