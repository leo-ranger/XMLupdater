name: Enrich EPG with TVmaze & Trakt

on:
  schedule:
    - cron: '10 0 * * *'
  workflow_dispatch:

jobs:
  enrich:
    runs-on: ubuntu-latest

    env:
      TRAKT_CLIENT_ID: ${{ secrets.TRAKT_CLIENT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install lxml requests fuzzywuzzy[speedup]

      - name: Enrich XMLs with TVmaze + Trakt fallback
        run: |
          python3 - <<'EOF'
          import os, re, time, glob, requests
          from lxml import etree
          from fuzzywuzzy import fuzz

          TRAKT_CLIENT_ID = os.getenv("TRAKT_CLIENT_ID")

          def normalize(text):
              return re.sub(r'\W+', ' ', text or '').strip().lower()

          def fuzzy_best_match(title, desc, episodes, threshold=80):
              input_text = normalize(f"{title} {desc}")
              best = None
              best_score = threshold

              for ep in episodes:
                  name = ep.get("name") or ep.get("title") or ""
                  summary = ep.get("summary") or ep.get("overview") or ""

                  fulltext = normalize(f"{title} {name} {summary}")

                  if re.search(r'best of|greatest moments|recap', name.lower()):
                      continue

                  score = fuzz.partial_ratio(input_text, fulltext)
                  if score > best_score:
                      best = ep
                      best_score = score
              return best

          def fetch_tvmaze(title, cache):
              if title in cache: return cache[title]
              try:
                  r = requests.get(f"https://api.tvmaze.com/singlesearch/shows?q={title}&embed=episodes", timeout=10)
                  if r.status_code == 200:
                      data = r.json()
                      eps = data["_embedded"]["episodes"]
                      cache[title] = eps
                      time.sleep(0.5)
                      return eps
              except: pass
              cache[title] = []
              return []

          headers = {
              "Content-Type": "application/json",
              "trakt-api-version": "2",
              "trakt-api-key": TRAKT_CLIENT_ID,
          }

          def fetch_trakt_show(title):
              try:
                  r = requests.get(f"https://api.trakt.tv/search/show?query={title}&limit=1", headers=headers)
                  if r.status_code == 200 and r.json():
                      time.sleep(0.3)
                      return r.json()[0]["show"]
              except: pass
              return None

          def fetch_trakt_episodes(slug):
              try:
                  r = requests.get(f"https://api.trakt.tv/shows/{slug}/seasons?extended=episodes", headers=headers)
                  if r.status_code == 200:
                      data = r.json()
                      eps = []
                      for s in data:
                          if s["number"] == 0: continue
                          eps.extend(s.get("episodes", []))
                      time.sleep(0.3)
                      return eps
              except: pass
              return []

          def fetch_trakt_specials(slug):
              try:
                  r = requests.get(f"https://api.trakt.tv/shows/{slug}/seasons?extended=episodes", headers=headers)
                  if r.status_code == 200:
                      data = r.json()
                      for s in data:
                          if s["number"] == 0:
                              time.sleep(0.3)
                              return s.get("episodes", [])
              except: pass
              return []

          def fetch_trakt_movie(title):
              try:
                  r = requests.get(f"https://api.trakt.tv/search/movie?query={title}&limit=1", headers=headers)
                  if r.status_code == 200 and r.json():
                      time.sleep(0.3)
                      return r.json()[0]["movie"]
              except: pass
              return None

          cache_tvmaze = {}

          for xml_file in glob.glob("individual/*.xml"):
              print(f"\nProcessing {xml_file}")
              parser = etree.XMLParser(recover=True)
              tree = etree.parse(xml_file, parser)
              root = tree.getroot()

              for prog in root.findall("programme"):
                  title_el = prog.find("title")
                  desc_el = prog.find("desc")
                  if title_el is None or desc_el is None:
                      continue

                  title = title_el.text.strip()
                  desc = desc_el.text.strip()

                  # Skip if already enriched
                  if any(ep.get("system") in ("tvmaze-matched", "trakt-matched") for ep in prog.findall("episode-num")):
                      continue

                  # If title contains "movie", only check Trakt Movies
                  if "movie" in title.lower():
                      trakt_movie = fetch_trakt_movie(title)
                      if trakt_movie:
                          etree.SubElement(prog, "episode-num", system="trakt-matched").text = "0.0.0"
                          etree.SubElement(prog, "sub-title", lang="en").text = trakt_movie.get("title", title)
                          if trakt_movie.get("released"):
                              etree.SubElement(prog, "date").text = trakt_movie["released"].replace("-", "")
                          etree.SubElement(prog, "category", lang="en").text = "Movie"
                          print(f"[Movie Title] Trakt Movie: {title} -> {trakt_movie['title']}")
                      else:
                          print(f"[Movie Title] No Trakt match for movie: {title}")
                      continue

                  # Step 1: TVmaze
                  eps = fetch_tvmaze(title, cache_tvmaze)
                  match = fuzzy_best_match(title, desc, eps)
                  if match:
                      etree.SubElement(prog, "episode-num", system="tvmaze-matched").text = f"{match['season']-1}.{match['number']}.0"
                      etree.SubElement(prog, "sub-title", lang="en").text = match.get("name", "")
                      if match.get("airdate"):
                          etree.SubElement(prog, "date").text = match["airdate"].replace("-", "")
                      print(f"TVmaze: {title} -> {match['name']}")
                      continue

                  # Step 2: Trakt Shows
                  trakt_show = fetch_trakt_show(title)
                  if trakt_show:
                      slug = trakt_show["ids"]["slug"]
                      eps = fetch_trakt_episodes(slug)
                      match = fuzzy_best_match(title, desc, eps)

                      # Step 3: Try Trakt specials if no match
                      if not match:
                          eps_specials = fetch_trakt_specials(slug)
                          match = fuzzy_best_match(title, desc, eps_specials)

                      if match:
                          etree.SubElement(prog, "episode-num", system="trakt-matched").text = f"{match['season']-1}.{match['number']}.0"
                          etree.SubElement(prog, "sub-title", lang="en").text = match.get("title", "")
                          if match.get("first_aired"):
                              etree.SubElement(prog, "date").text = match["first_aired"].split("T")[0].replace("-", "")
                          print(f"Trakt Show: {title} -> {match['title']}")
                          continue

                  # Step 4: If no show found at all, try Trakt movie
                  if not trakt_show:
                      trakt_movie = fetch_trakt_movie(title)
                      if trakt_movie:
                          etree.SubElement(prog, "episode-num", system="trakt-matched").text = "0.0.0"
                          etree.SubElement(prog, "sub-title", lang="en").text = trakt_movie.get("title", title)
                          if trakt_movie.get("released"):
                              etree.SubElement(prog, "date").text = trakt_movie["released"].replace("-", "")
                          etree.SubElement(prog, "category", lang="en").text = "Movie"
                          print(f"Trakt Movie: {title} -> {trakt_movie['title']}")
                          continue

              tree.write(xml_file, encoding="utf-8", xml_declaration=True)
          EOF

      - name: Commit changes
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add individual/*.xml
          git diff --cached --quiet || (git commit -m "Enriched EPG with refined TVmaze/Trakt matching" && git push)
