name: Update EPG XML Redbulltv (Sydney time)

on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Create individual folder if missing
        run: mkdir -p individual

      - name: Download Red Bull TV EPG XML
        run: curl -o individual/redbulltv.xml "https://nzxmltv.com/iptv/redbull.xml"

      - name: Process XML for Sydney timezone and formatting
        run: |
          # Set input/output files
          infile="individual/redbulltv.xml"
          outfile="individual/redbulltv_processed.xml"

          # Prepare XML header & fixed channel info
          header='<?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE tv SYSTEM "xmltv.dtd">
          <tv date="" generator-info-name="NZXMLTV Red Bull TV 1.0" generator-info-url="https://nzxmltv.com/iptv/" source-info-name="NZXMLTV (Red Bull TV)" source-info-url="https://www.redbull.com/int-en/channels/best-of-red-bull-stream">
          <channel id="10001">
          <display-name lang="US">Red Bull TV</display-name>
          <icon src="https://i.imgur.com/3IO3vYp.png" />
          </channel>'

          # Write header to outfile, inserting current datetime in Sydney timezone
          now=$(TZ=Australia/Sydney date '+%Y-%m-%d %H:%M:%S')
          echo "$header" | sed "s/date=\"\"/date=\"$now\"/" > "$outfile"

          # Function to convert UTC time to Sydney local time + offset for XMLTV format
          convert_time() {
            utc_time="$1" # e.g. 20250615191515
            # Convert to Sydney time ISO 8601 with offset
            sydney_iso=$(date -u -d "${utc_time:0:8} ${utc_time:8:2}:${utc_time:10:2}:${utc_time:12:2} UTC" +"%Y%m%d%H%M%S %z" --timezone=Australia/Sydney)
            echo "$sydney_iso"
          }

          # Parse input file, process <programme> elements
          # We use xmlstarlet to safely parse XML if available, else fallback to sed/awk (not recommended)
          if command -v xmlstarlet >/dev/null 2>&1; then
            # Using xmlstarlet for clean processing

            # Extract and process programmes
            xmlstarlet sel -t -m "//programme" \
              -v "concat(
                '<programme channel=\"',@channel,'\" start=\"',@start,'\" stop=\"',@stop,'\">'
              )" -n \
              -v "title" -n \
              -v "sub-title" -n \
              -v "desc" -n \
              -v "icon/@src" -n \
              -v "episode-num" -n \
              -v "rating" -n \
              -v "date" -n \
              "$infile" | while IFS= read -r line; do
                # Process each line (simplified example)
                # For full transformation, a dedicated XML transform script would be better
                echo "$line"
              done >> "$outfile"

          else
            # Fallback: Use sed/awk to process XML text (not safe for complex XML)

            # Remove all <url> tags from programmes
            sed '/<programme/,/<\/programme>/{
              s/<url>.*<\/url>//g
            }' "$infile" | \
            # Convert <programme> start and stop times from UTC to Sydney
            awk '
            function conv_time(utc,   yyyy,mm,dd,hh,mi,ss,cmd,cmdout,sydney){
              yyyy=substr(utc,1,4);
              mm=substr(utc,5,2);
              dd=substr(utc,7,2);
              hh=substr(utc,9,2);
              mi=substr(utc,11,2);
              ss=substr(utc,13,2);
              # Construct ISO datetime string
              cmd="date -u -d \"" yyyy "-" mm "-" dd " " hh ":" mi ":" ss " UTC\" +\"%Y%m%d%H%M%S %z\" --timezone=Australia/Sydney";
              cmd | getline sydney;
              close(cmd);
              return sydney;
            }
            /<programme / {
              start=""; stop="";
              match($0, /start="([^"]+)"/, a);
              match($0, /stop="([^"]+)"/, b);
              start=conv_time(a[1]);
              stop=conv_time(b[1]);
              sub(/start="[^"]+"/,"start=\"" start "\"");
              sub(/stop="[^"]+"/,"stop=\"" stop "\"");
            }
            {print}
            ' >> "$outfile"
          fi

          # Close tv tag at end of file
          echo "</tv>" >> "$outfile"

          # Replace original file with processed one
          mv "$outfile" "$infile"

      - name: Commit and push if changed
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add individual/redbulltv.xml
          git commit -m "Update Red Bull TV EPG $(date +%Y-%m-%d)" || echo "No changes"
          git push
